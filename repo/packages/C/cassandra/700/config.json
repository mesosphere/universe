{
  "type": "object",
  "properties": {
    "service": {
      "type": "object",
      "description": "DC/OS Apache Cassandra service configuration properties",
      "properties": {
        "name": {
          "description": "Unique name for the Cassandra service instance consisting of a series of words separated by slashes. Each word must be at least 1 alphanumeric character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The word may not begin or end with a dash",
          "type": "string",
          "pattern": "^(\\/?((\\.\\.)|(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9]))?($|\\/))+$",
          "default": "cassandra"
        },
        "user": {
          "description": "The user that runs the Cassandra nodes and owns the Mesos sandbox.",
          "type": "string",
          "default": "nobody"
        },
        "service_account": {
          "description": "The service account for DC/OS service authentication. This is typically left empty to use the default unless service authentication is needed. The value given here is passed as the principal of Mesos framework.",
          "type": "string",
          "default": "",
          "media": {
            "type": "application/x-service-account+string"
          }
        },
        "service_account_secret": {
          "description": "Name of the Secret Store credentials to use for DC/OS service authentication. This should be left empty unless service authentication is needed.",
          "type": "string",
          "default": "",
          "media": {
            "type": "application/x-secret+string"
          }
        },
        "virtual_network_enabled": {
          "description": "Enable virtual networking",
          "type": "boolean",
          "default": false
        },
        "virtual_network_name": {
          "description": "The name of the virtual network to join",
          "type": "string",
          "default": "dcos"
        },
        "virtual_network_plugin_labels": {
          "description": "Labels to pass to the virtual network plugin. Comma-separated key:value pairs. For example: k_0:v_0,k_1:v_1,...,k_n:v_n",
          "type": "string",
          "default": ""
        },
        "log_level": {
          "description": "The log level for the DC/OS service.",
          "type": "string",
          "enum": [
            "OFF",
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE",
            "ALL"
          ],
          "default": "INFO"
        },
        "data_center": {
          "description": "The name of the data center this cluster is running in",
          "type": "string",
          "default": "datacenter1"
        },
        "rack": {
          "description": "The name of the rack this cluster is running on. Note, this is overridden by the zone if a zone-specific placement constraint is selected",
          "type": "string",
          "default": "rack1"
        },
        "remote_seeds": {
          "description": "A comma-separated list of seed nodes from other clusters in a multi-datacenter deployment",
          "type": "string",
          "default": ""
        },
        "backup_restore_strategy": {
          "description": "Strategy to use for uploading/downloading backups {serial, parallel}",
          "type": "string",
          "enum": [
            "serial",
            "parallel"
          ],
          "default": "serial"
        },
        "region": {
          "description": "The Cassandra cluster will run in this region.  When no region is specified the cluster is constrained to the local region.",
          "type": "string",
          "default": "",
          "media": {
            "type": "application/x-region+string"
          }
        },
        "security": {
          "description": "Cassandra security settings",
          "type": "object",
          "properties": {
            "transport_encryption": {
              "type": "object",
              "description": "Transport encryption settings",
              "properties": {
                "enabled": {
                  "description": "Enable transport encryption (TLS)",
                  "type": "boolean",
                  "default": false
                },
                "allow_plaintext": {
                  "description": "Allow plaintext alongside encrypted traffic",
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "authentication": {
              "type": "object",
              "description": "DC/OS Apache Cassandra authentication settings",
              "properties": {
                "enabled": {
                  "description": "Enable authentication",
                  "type": "boolean",
                  "default": false
                },
                "superuser": {
                  "type": "object",
                  "description": "The super user configuration settings. Only valid when using Apache Cassandra's native PasswordAuthenticator.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the superuser",
                      "default": "dcossuperuser"
                    },
                    "password_secret_path": {
                      "type": "string",
                      "description": "The path in the DC/OS Secret Store to retrieve the superuser password from. If using 'PasswordAuthenticator', you must first create the secret in the Secret Store.",
                      "default": ""
                    }
                  }
                },
                "authenticator": {
                  "description": "The name of the authenticator. By default, the value set is Apache Cassandra's native authenticator: PasswordAuthenticator",
                  "type": "string",
                  "default": "PasswordAuthenticator"
                },
                "role_manager": {
                  "description": "Part of the Authentication & Authorization backend that implements IRoleManager to maintain grants and memberships between roles, By default, the value set is Apache Cassandra's out of the box Role Manager: CassandraRoleManager",
                  "type": "string",
                  "default": "CassandraRoleManager"
                },
                "authentication_custom_cassandra_yml": {
                  "description": "Custom YAML to be appended to cassandra.yml on each node. This field must be base64 encoded.",
                  "type": "string",
                  "media": {
                    "binaryEncoding": "base64",
                    "type": "application/x-yaml"
                  },
                  "default": ""
                }
              }
            },
            "authorization": {
              "type": "object",
              "description": "DC/OS Apache Cassandra authorization settings",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Enable authorization",
                  "default": false
                },
                "authorizer": {
                  "description": "The name of the authorizer. By default, the value set is Apache Cassandra's native authorizer: CassandraAuthorizer",
                  "type": "string",
                  "default": "CassandraAuthorizer"
                },
                "roles_validity_in_ms": {
                  "type": "integer",
                  "description": "Validity period for roles cache; set to 0 to disable",
                  "default": 2000
                },
                "roles_update_interval_in_ms": {
                  "type": "integer",
                  "description": "After this interval, cache entries become eligible for refresh. Upon next access, Cassandra schedules an async reload, and returns the old value until the reload completes. If roles_validity_in_ms is non-zero, then this must be also.",
                  "default": 2000
                },
                "credentials_validity_in_ms": {
                  "type": "integer",
                  "description": " This cache is tightly coupled to the provided PasswordAuthenticator implementation of IAuthenticator. If another IAuthenticator implementation is configured, Cassandra does not use this cache, and these settings have no effect. Set to 0 to disable.",
                  "default": 2000
                },
                "credentials_update_interval_in_ms": {
                  "type": "integer",
                  "description": "After this interval, cache entries become eligible for refresh. The next time the cache is accessed, the system schedules an asynchronous reload of the cache. Until this cache reload is complete, the cache returns the old values. If credentials_validity_in_ms is nonzero, this property must also be nonzero.",
                  "default": 2000
                },
                "permissions_validity_in_ms": {
                  "type": "integer",
                  "description": "How many milliseconds permissions in cache remain valid. Fetching permissions can be resource intensive. To disable the cache, set this to 0.",
                  "default": 2000
                },
                "permissions_update_interval_in_ms": {
                  "type": "integer",
                  "description": "If enabled, sets refresh interval for the permissions cache. After this interval, cache entries become eligible for refresh. On next access, Cassandra schedules an async reload and returns the old value until the reload completes. If permissions_validity_in_ms is nonzero, permissions_update_interval_in_ms must also be non-zero.",
                  "default": 2000
                },
                "permissions_cache_max_entries": {
                  "type": "integer",
                  "description": "The maximum number of entries that are held by the standard authentication cache and row-level access control (RLAC) cache.",
                  "default": 1000
                }
              }
            },
            "custom_domain": {
              "type": "string",
              "description": "A custom domain to be used in place of autoip.dcos.thisdcos.directory. This can be used to expose the service securely outside of the cluster, but requires setting up external DNS. See the service documentation for details."
            }
          }
        },
        "jmx": {
          "title": "Secure JMX configuration",
          "description": "Configure the secure JMX settings.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable secure JMX",
              "type": "boolean",
              "enum": [
                true,
                false
              ],
              "default": false
            }
          },
          "dependencies": {
            "enabled": {
              "oneOf": [
                {
                  "properties": {
                    "enabled": {
                      "enum": [
                        false
                      ]
                    }
                  }
                },
                {
                  "properties": {
                    "enabled": {
                      "enum": [
                        true
                      ]
                    },
                    "rmi_port": {
                      "description": "RMI port to expose.",
                      "type": "integer",
                      "default": 31420
                    },
                    "access_file": {
                      "description": "Secret name that contains access file",
                      "type": "string",
                      "default": "",
                      "media": {
                        "type": "application/x-secret+string"
                      }
                    },
                    "password_file": {
                      "description": "Secret name that contains password file.",
                      "type": "string",
                      "default": "",
                      "media": {
                        "type": "application/x-secret+string"
                      }
                    },
                    "key_store": {
                      "description": "Secret name that contains key store file.",
                      "type": "string",
                      "title": "key store",
                      "default": "",
                      "media": {
                        "type": "application/x-secret+string"
                      }
                    },
                    "key_store_password_file": {
                      "description": "Secret name that contains key store password file.",
                      "type": "string",
                      "default": "",
                      "media": {
                        "type": "application/x-secret+string"
                      }
                    },
                    "add_trust_store": {
                      "description": "By default user specified trust store is disabled and user provided certs are added to the default trust store.",
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ],
                      "default": false
                    }
                  },
                  "dependencies": {
                    "add_trust_store": {
                      "oneOf": [
                        {
                          "properties": {
                            "add_trust_store": {
                              "enum": [
                                false
                              ]
                            }
                          }
                        },
                        {
                          "properties": {
                            "add_trust_store": {
                              "enum": [
                                true
                              ]
                            },
                            "trust_store": {
                              "description": "Secret name that contains trust store file.",
                              "type": "string",
                              "default": "",
                              "media": {
                                "type": "application/x-secret+string"
                              }
                            },
                            "trust_store_password_file": {
                              "description": "Secret name that contains trust store password file.",
                              "type": "string",
                              "default": "",
                              "media": {
                                "type": "application/x-secret+string"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        "readiness_check": {
          "description": "Readiness check settings. Excercise caution when modifying these default values as it can lead to spurious task failures.",
          "type": "object",
          "properties": {
            "interval": {
              "type": "integer",
              "description": "The period in seconds to wait after the last readiness check has completed to start the next check.",
              "default": 5,
              "minimum": 5
            },
            "delay": {
              "type": "integer",
              "description": "An amount of time in seconds to wait before starting the readiness check attempts.",
              "default": 0,
              "minimum": 0
            },
            "timeout": {
              "type": "integer",
              "description": "An amount of time in seconds to wait for a readiness check to succeed.",
              "default": 60,
              "minimum": 60
            }
          }
        },
        "rlimits": {
          "description": "POSIX resource limits applied to the pod. Excercise caution when modifying these default values as it can lead to spurious task failures.",
          "type": "object",
          "properties": {
            "rlimit_nofile": {
              "description": "Specifies RLIMIT_NOFILE, a value one greater than the maximum file descriptor number that can be opened by this process.",
              "type": "object",
              "properties": {
                "soft": {
                  "type": "integer",
                  "description": "The  soft  limit  is  the  value that the kernel enforces for the corresponding resource.",
                  "default": 128000,
                  "minimum": 128000
                },
                "hard": {
                  "type": "integer",
                  "description": "The  hard  limit  acts as a ceiling for the soft limit.",
                  "default": 128000,
                  "minimum": 128000
                }
              }
            }
          }
        },
        "check": {
          "description": "Health check used to determine the scheduler health based on the status of the scheduler plans.",
          "type": "object",
          "properties": {
            "intervalSeconds": {
              "type": "integer",
              "description": "The period in seconds to wait after the last check has completed to start the next check.",
              "default": 30,
              "minimum": 30
            },
            "timeoutSeconds": {
              "type": "integer",
              "description": " An amount of time in seconds to wait for check to succeed.",
              "default": 20,
              "minimum": 20
            },
            "delaySeconds": {
              "type": "integer",
              "description": "An amount of time in seconds to wait before starting the check attempts.",
              "default": 15,
              "minimum": 15
            }
          }
        }
      },
      "required": [
        "name",
        "user"
      ]
    },
    "nodes": {
      "type": "object",
      "description": "DC/OS Apache Cassandra node configuration properties",
      "properties": {
        "count": {
          "type": "integer",
          "description": "The number of Cassandra nodes in the cluster.",
          "default": 3,
          "minimum": 3
        },
        "cpus": {
          "type": "number",
          "description": "The number of cpu shares allocated to the Cassandra process.",
          "default": 0.5
        },
        "mem": {
          "type": "integer",
          "description": "The amount of memory, in MB, allocated to the Cassandra process.",
          "default": 4096
        },
        "disk": {
          "type": "integer",
          "description": "The amount of disk, in MB, allocated to the Cassandra process.",
          "default": 10240
        },
        "disk_type": {
          "type": "string",
          "description": "Disk type to be used for storing Cassandra data. See documentation. [ROOT, MOUNT]",
          "enum": [
            "ROOT",
            "MOUNT"
          ],
          "default": "ROOT"
        },
        "volume_profile": {
          "type": "string",
          "description": "Volume profile to be used for storing Cassandra data."
        },
        "placement_constraint": {
          "type": "string",
          "description": "Placement constraints for nodes (e.g., [[\"hostname\", \"MAX_PER\", \"1\"]]).",
          "default": "[[\"hostname\", \"MAX_PER\", \"1\"]]",
          "media": {
            "type": "application/x-zone-constraints+json"
          }
        },
        "heap": {
          "type": "object",
          "description": "The Cassandra process JVM heap configuration object.",
          "properties": {
            "size": {
              "type": "integer",
              "description": "The amount of JVM heap, in MB, allocated to the Cassandra process.",
              "default": 2048
            },
            "new": {
              "type": "integer",
              "description": "The amount of JVM new generation heap, in MB, allocated to the Cassandra process.",
              "default": 100
            },
            "gc": {
              "type": "string",
              "enum": [
                "G1",
                "CMS"
              ],
              "description": "The Garbage collector for JVM (Either G1 or CMS).",
              "default": "CMS"
            }
          },
          "additionalProperties": false,
          "required": [
            "size",
            "new",
            "gc"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "cpus",
        "mem",
        "disk",
        "heap",
        "count"
      ]
    },
    "cassandra": {
      "description": "Apache Cassandra configuration properties",
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "description": "The name of the cluster managed by the Service",
          "default": "cassandra"
        },
        "jmx_port": {
          "type": "integer",
          "description": "The JMX port that will be used to interface with the Cassandra application.",
          "default": 7199
        },
        "seed_provider_class": {
          "type": "string",
          "description": "The class within Cassandra that handles the seed logic.",
          "default": "org.apache.cassandra.locator.SimpleSeedProvider"
        },
        "num_tokens": {
          "type": "integer",
          "description": "The number of tokens assigned to each node.",
          "default": 256
        },
        "hinted_handoff_enabled": {
          "type": "boolean",
          "description": "If true, hinted handoff is enabled for the cluster.",
          "default": true
        },
        "max_hint_window_in_ms": {
          "type": "integer",
          "description": "The maximum amount of time, in ms, that hints are generates hints for an unresponsive node.",
          "default": 10800000
        },
        "hinted_handoff_throttle_in_kb": {
          "type": "integer",
          "description": "The maximum throttle per delivery thread in kilobytes per second.",
          "default": 1024
        },
        "max_hints_delivery_threads": {
          "type": "integer",
          "description": "The maximum number of delivery threads for hinted handoff.",
          "default": 2
        },
        "batchlog_replay_throttle_in_kb": {
          "type": "integer",
          "description": "The total throttle for log replay in Kpbs.",
          "default": 1024
        },
        "partitioner": {
          "type": "string",
          "description": "The partitioner used to distribute rows across the cluster. Murmur3Partitioner is the recommended setting. RandomPartitioner and ByteOrderedPartitioner are supported for legacy applications.",
          "default": "org.apache.cassandra.dht.Murmur3Partitioner"
        },
        "key_cache_save_period": {
          "type": "integer",
          "description": "The duration in seconds that keys are saved in cache. Saved caches greatly improve cold-start speeds and has relatively little effect on I/O.",
          "default": 14400
        },
        "row_cache_size_in_mb": {
          "type": "integer",
          "description": "Maximum size of the row cache in memory. Row cache can save more time than key_cache_size_in_mb, but is space-intensive because it contains the entire row. Use the row cache only for hot rows or static rows. 0 disables the row cache.",
          "default": 0
        },
        "row_cache_save_period": {
          "type": "integer",
          "description": "Duration in seconds that rows are saved in cache. 0 disables caching.",
          "default": 0
        },
        "commitlog_sync_period_in_ms": {
          "type": "integer",
          "description": "The number of milliseconds between disk fsync calls.",
          "default": 10000
        },
        "commitlog_sync_batch_window_in_ms": {
          "type": "string",
          "description": "Time to wait between batch fsyncs, if commitlog_sync is in batch mode then default value should be: 2",
          "default": ""
        },
        "commitlog_segment_size_in_mb": {
          "type": "integer",
          "description": "The size of each commit log segment in Mb.",
          "default": 32
        },
        "concurrent_reads": {
          "type": "integer",
          "description": "For workloads with more data than can fit in memory, the bottleneck is reads fetching data from disk. Setting to (16 times the number of drives) allows operations to queue low enough in the stack so that the OS and drives can reorder them.",
          "default": 16
        },
        "concurrent_writes": {
          "type": "integer",
          "description": "Writes in Cassandra are rarely I/O bound, so the ideal number of concurrent writes depends on the number of CPU cores in your system. The recommended value is 8 times the number of cpu cores.",
          "default": 32
        },
        "concurrent_counter_writes": {
          "type": "integer",
          "description": "Counter writes read the current values before incrementing and writing them back. The recommended value is (16 times the number of drives) .",
          "default": 16
        },
        "memtable_allocation_type": {
          "type": "string",
          "description": "The type of allocations for the Cassandra memtable. heap_buffers keep all data on the JVM heap. offheap_buffers may reduce heap utilization for large string or binary values. offheap_objects may improve heap size for small integers or UUIDs as well. Both off heap options will increase read latency.",
          "default": "heap_buffers"
        },
        "index_summary_resize_interval_in_minutes": {
          "type": "integer",
          "description": "How frequently index summaries should be re-sampled in minutes. This is done periodically to redistribute memory from the fixed-size pool to SSTables proportional their recent read rates.",
          "default": 60
        },
        "storage_port": {
          "type": "integer",
          "description": "The port for inter-node communication.",
          "default": 7000
        },
        "ssl_storage_port": {
          "type": "integer",
          "description": "The port for inter-node communication over SSL.",
          "default": 7001
        },
        "start_native_transport": {
          "type": "boolean",
          "description": "If true CQL is enabled.",
          "default": true
        },
        "native_transport_port": {
          "type": "integer",
          "description": "The port for CQL communication.",
          "default": 9042
        },
        "start_rpc": {
          "type": "boolean",
          "description": "If true Thrift RPC is enabled. This is deprecated but may be necessary for legacy applications.",
          "default": false
        },
        "rpc_port": {
          "type": "integer",
          "description": "The port for Thrift RPC communication.",
          "default": 9160
        },
        "rpc_keepalive": {
          "type": "boolean",
          "description": "Enables or TCP keepalive for RPC connections.",
          "default": true
        },
        "thrift_framed_transport_size_in_mb": {
          "type": "integer",
          "description": "Frame size (maximum field length) for Thrift.",
          "default": 15
        },
        "tombstone_warn_threshold": {
          "type": "integer",
          "description": "The maximum number of tombstones a query can scan before warning.",
          "default": 1000
        },
        "tombstone_failure_threshold": {
          "type": "integer",
          "description": "The maximum number of tombstones a query can scan before aborting.",
          "default": 100000
        },
        "column_index_size_in_kb": {
          "type": "integer",
          "description": "The granularity of the index of rows within a partition. For huge rows, decrease this setting to improve seek time. If you use key cache, be careful not to make this setting too large because key cache will be overwhelmed.",
          "default": 64
        },
        "batch_size_warn_threshold_in_kb": {
          "type": "integer",
          "description": "Warn the operator on a batch size exceeding this value in kilobytes. Caution should be taken on increasing the size of this threshold as it can lead to node instability.",
          "default": 5
        },
        "batch_size_fail_threshold_in_kb": {
          "type": "integer",
          "description": "Fail batch sizes exceeding this value in kilobytes. Caution should be taken on increasing the size of this threshold as it can lead to node instability.",
          "default": 50
        },
        "compaction_throughput_mb_per_sec": {
          "type": "integer",
          "description": "Throttles compaction to the specified total throughput across the node. Compaction frequency varies with direct proportion to write throughput and is necessary to limit the SSTable size. The recommended value is 16 to 32 times the rate of write throughput (in MB/second).",
          "default": 16
        },
        "sstable_preemptive_open_interval_in_mb": {
          "type": "integer",
          "description": "When compacting, the replacement opens SSTables before they are completely written and uses in place of the prior SSTables for any range previously written. This setting helps to smoothly transfer reads between the SSTables by reducing page cache churn and keeps hot rows hot.",
          "default": 50
        },
        "read_request_timeout_in_ms": {
          "type": "integer",
          "description": "The time that the coordinator waits for read operations to complete in ms.",
          "default": 5000
        },
        "range_request_timeout_in_ms": {
          "type": "integer",
          "description": "The time that the coordinator waits for range scans complete in ms.",
          "default": 10000
        },
        "write_request_timeout_in_ms": {
          "type": "integer",
          "description": "The time that the coordinator waits for write operations to complete in ms.",
          "default": 2000
        },
        "counter_write_request_timeout_in_ms": {
          "type": "integer",
          "description": "The time that the coordinator waits for counter write operations to complete in ms.",
          "default": 5000
        },
        "cas_contention_timeout_in_ms": {
          "type": "integer",
          "description": "The time for which the coordinator will retry CAS operations on the same row in ms.",
          "default": 1000
        },
        "truncate_request_timeout_in_ms": {
          "type": "integer",
          "description": "The time that the coordinator waits for truncate operations to complete in ms.",
          "default": 60000
        },
        "request_timeout_in_ms": {
          "type": "integer",
          "description": "The default timeout for all other requests in ms.",
          "default": 10000
        },
        "dynamic_snitch_update_interval_in_ms": {
          "type": "integer",
          "description": "The time, in ms, the snitch will wait before updating node scores.",
          "default": 100
        },
        "dynamic_snitch_reset_interval_in_ms": {
          "type": "integer",
          "description": "The time, in ms, the snitch will wait before resetting node scores allowing bad nodes to recover.",
          "default": 600000
        },
        "dynamic_snitch_badness_threshold": {
          "type": "number",
          "description": "Sets the performance threshold for dynamically routing client requests away from a poorly performing node.",
          "default": 0.1
        },
        "internode_compression": {
          "type": "string",
          "description": "Controls whether traffic between nodes is compressed. all compresses all traffic. none compresses no traffic. dc compresses between datacenters.",
          "default": "all"
        },
        "max_hints_file_size_in_mb": {
          "type": "integer",
          "description": "The maximum size of the hints file in Mb.",
          "default": 128
        },
        "hints_flush_period_in_ms": {
          "type": "integer",
          "description": "The time, in ms, for the period in which hints are flushed to disk.",
          "default": 10000
        },
        "concurrent_materialized_view_writes": {
          "type": "integer",
          "description": "The maximum number of concurrent writes to materialized views.",
          "default": 32
        },
        "commitlog_total_space_in_mb": {
          "type": "integer",
          "description": "The total size of the commit log in Mb.",
          "default": 8192
        },
        "auto_snapshot": {
          "type": "boolean",
          "description": "Take a snapshot of the data before truncating a keyspace or dropping a table",
          "default": true
        },
        "key_cache_keys_to_save": {
          "type": "integer",
          "description": "The number of keys from the key cache to save",
          "default": 100
        },
        "row_cache_keys_to_save": {
          "type": "integer",
          "description": "The number of keys from the row cache to save",
          "default": 100
        },
        "counter_cache_keys_to_save": {
          "type": "integer",
          "description": "The number of keys from the counter cache to save",
          "default": 100
        },
        "file_cache_size_in_mb": {
          "type": "integer",
          "description": "The total memory to use for SSTable-reading buffers",
          "default": 512
        },
        "memtable_heap_space_in_mb": {
          "type": "integer",
          "description": "The amount of on-heap memory allocated for memtables",
          "default": 2048
        },
        "memtable_offheap_space_in_mb": {
          "type": "integer",
          "description": "The total amount of off-heap memory allocated for memtables",
          "default": 2048
        },
        "memtable_cleanup_threshold": {
          "type": "number",
          "description": "The ratio used for automatic memtable flush",
          "default": 0.11
        },
        "memtable_flush_writers": {
          "type": "integer",
          "description": "The number of memtable flush writer threads",
          "default": 2
        },
        "listen_on_broadcast_address": {
          "type": "boolean",
          "description": "Listen on the address set in broadcast_address property",
          "default": false
        },
        "internode_authenticator": {
          "type": "string",
          "description": "The internode authentication backend",
          "default": "org.apache.cassandra.auth.AllowAllInternodeAuthenticator"
        },
        "native_transport_max_threads": {
          "type": "integer",
          "description": "The maximum number of thread handling requests",
          "default": 128
        },
        "native_transport_max_frame_size_in_mb": {
          "type": "integer",
          "description": "The maximum allowed size of a frame",
          "default": 256
        },
        "native_transport_max_concurrent_connections": {
          "type": "integer",
          "description": "The maximum number of concurrent client connections",
          "default": -1
        },
        "native_transport_max_concurrent_connections_per_ip": {
          "type": "integer",
          "description": "The maximum number of concurrent client connections per source IP address",
          "default": -1
        },
        "rpc_min_threads": {
          "type": "integer",
          "description": "The minimum thread pool size for remote procedure calls",
          "default": 16
        },
        "rpc_max_threads": {
          "type": "integer",
          "description": "The maximum thread pool size for remote procedure calls",
          "default": 2048
        },
        "rpc_send_buff_size_in_bytes": {
          "type": "integer",
          "description": "The sending socket buffer size in bytes for remote procedure calls",
          "default": 16384
        },
        "rpc_recv_buff_size_in_bytes": {
          "type": "integer",
          "description": "The receiving socket buffer size for remote procedure calls",
          "default": 16384
        },
        "concurrent_compactors": {
          "type": "integer",
          "description": "The number of concurrent compaction processes allowed to run simultaneously on a node",
          "default": 1
        },
        "stream_throughput_outbound_megabits_per_sec": {
          "type": "integer",
          "description": "The maximum throughput of all outbound streaming file transfers on a node",
          "default": 200
        },
        "inter_dc_stream_throughput_outbound_megabits_per_sec": {
          "type": "integer",
          "description": "The maximum throughput of all streaming file transfers between datacenters",
          "default": 200
        },
        "streaming_keep_alive_period_in_secs": {
          "type": "integer",
          "description": "Interval to send keep-alive messages. The stream session fails when a keep-alive message is not received for 2 keep-alive cycles.",
          "default": 300
        },
        "phi_convict_threshold": {
          "type": "integer",
          "description": "The sensitivity of the failure detector on an exponential scale",
          "default": 8
        },
        "buffer_pool_use_heap_if_exhausted": {
          "type": "boolean",
          "description": "Allocate on-heap memory when the SSTable buffer pool is exhausted",
          "default": true
        },
        "disk_optimization_strategy": {
          "type": "string",
          "description": "The strategy for optimizing disk reads",
          "enum": [
            "ssd",
            "spinning"
          ],
          "default": "ssd"
        },
        "max_value_size_in_mb": {
          "type": "integer",
          "description": "The maximum size of any value in SSTables",
          "default": 256
        },
        "otc_coalescing_strategy": {
          "type": "string",
          "description": "The strategy to use for coalescing network messages",
          "default": "DISABLED"
        },
        "unlogged_batch_across_partitions_warn_threshold": {
          "type": "integer",
          "description": "Causes Cassandra to log a WARN message on any batches not of type LOGGED that span across more partitions than this limit.",
          "default": 10
        },
        "compaction_large_partition_warning_threshold_mb": {
          "type": "integer",
          "description": "Cassandra logs a warning when compacting partitions larger than the set value.",
          "default": 100
        },
        "request_scheduler": {
          "type": "string",
          "description": "The scheduler to handle incoming client requests according to a defined policy. This scheduler is useful for throttling client requests in single clusters containing multiple keyspaces.",
          "default": "org.apache.cassandra.scheduler.NoScheduler"
        },
        "inter_dc_tcp_nodelay": {
          "type": "boolean",
          "description": "Enable this property for inter-datacenter communication.",
          "default": false
        },
        "tracetype_query_ttl": {
          "type": "integer",
          "description": "TTL for different trace types used during logging of the query process.",
          "default": 86400
        },
        "tracetype_repair_ttl": {
          "type": "integer",
          "description": "TTL for different trace types used during logging of the repair process.",
          "default": 604800
        },
        "gc_warn_threshold_in_ms": {
          "type": "integer",
          "description": "Any GC pause longer than this interval is logged at the WARN level.",
          "default": 1000
        },
        "windows_timer_interval": {
          "type": "integer",
          "description": "The default Windows kernel timer and scheduling resolution is 15.6ms for power conservation. Lowering this value on Windows can provide much tighter latency and better throughput, however some virtualized environments may see a negative performance impact from changing this setting below their system default.",
          "default": 1
        },
        "counter_cache_save_period": {
          "type": "integer",
          "description": "the amount of time after which Cassandra saves the counter cache (keys only).",
          "default": 7200
        },
        "trickle_fsync_interval_in_kb": {
          "type": "integer",
          "description": "The size of the fsync in kilobytes.",
          "default": 10240
        },
        "trickle_fsync": {
          "type": "boolean",
          "description": "When set to true, causes fsync to force the operating system to flush the dirty buffers at the set interval ",
          "default": false
        },
        "incremental_backups": {
          "type": "boolean",
          "description": "Backs up data updated since the last snapshot was taken. When enabled, Cassandra creates a hard link to each SSTable flushed or streamed locally in a backups subdirectory of the keyspace data.",
          "default": false
        },
        "snapshot_before_compaction": {
          "type": "boolean",
          "description": "Enables or disables taking a snapshot before each compaction. A snapshot is useful to back up data when there is a data format change.",
          "default": false
        },
        "cross_node_timeout": {
          "type": "boolean",
          "description": "operation timeout information exchange between nodes (to accurately measure request timeouts).",
          "default": false
        },
        "commit_failure_policy": {
          "type": "string",
          "description": "Policy for commit disk failures.",
          "enum": [
            "die",
            "stop",
            "stop_commit",
            "ignore"
          ],
          "default": "stop"
        },
        "key_cache_size_in_mb": {
          "type": "string",
          "description": "A global cache setting for the maximum size of the key cache in memory (for all tables). ",
          "default": ""
        },
        "counter_cache_size_in_mb": {
          "type": "string",
          "description": "When no value is set, Cassandra uses the smaller of minimum of 2.5% of Heap or 50MB.",
          "default": ""
        },
        "commitlog_sync": {
          "type": "string",
          "description": "The method that Cassandra uses to acknowledge writes in milliseconds",
          "enum": [
            "periodic",
            "batch"
          ],
          "default": "periodic"
        },
        "index_summary_capacity_in_mb": {
          "type": "string",
          "description": "Fixed memory pool size in MB for SSTable index summaries.",
          "default": ""
        },
        "rpc_server_type": {
          "type": "string",
          "description": "Cassandra provides three options for the RPC server. sync and hsha performance is about the same, but hsha uses less memory.",
          "default": "sync"
        },
        "endpoint_snitch": {
          "type": "string",
          "description": "Set to a class that implements the IEndpointSnitch interface. Cassandra uses the snitch to locate nodes and route requests.",
          "default": "GossipingPropertyFileSnitch"
        },
        "disk_failure_policy": {
          "type": "string",
          "description": "The policy for how Cassandra responds to disk failure",
          "default": "stop",
          "enum": [
            "die",
            "stop_paranoid",
            "stop",
            "best_effort",
            "ignore"
          ]
        },
        "enable_user_defined_functions": {
          "type": "boolean",
          "description": " User defined functions (UDFs) present a security risk, since they are executed on the server side. UDFs are executed in a sandbox to contain the execution of malicious code.",
          "default": false
        },
        "enable_scripted_user_defined_functions": {
          "type": "boolean",
          "description": "Java UDFs are always enabled, if enable_user_defined_functions is true. Enable this option to use UDFs with language javascript or any custom JSR-223 provider. This option has no effect if enable_user_defined_functions is false",
          "default": false
        },
        "cdc_enabled": {
          "type": "boolean",
          "description": "Enable / disable CDC functionality on a per-node basis. This modifies the logic used for write path allocation rejection",
          "default": false
        },
        "cdc_total_space_in_mb": {
          "type": "integer",
          "description": "Total space to use for change-data-capture (CDC) logs on disk. ",
          "default": 4096
        },
        "cdc_free_space_check_interval_ms": {
          "type": "integer",
          "description": "Interval between checks for new available space for CDC-tracked tables when the cdc_total_space_in_mb threshold is reached and the CDCCompactor is running behind or experiencing back pressure.",
          "default": 250
        },
        "prepared_statements_cache_size_mb": {
          "type": "string",
          "description": "Maximum size of the native protocol prepared statement cache",
          "default": ""
        },
        "thrift_prepared_statements_cache_size_mb": {
          "type": "string",
          "description": "Maximum size of the Thrift prepared statement cache. Leave empty if you do not use Thrift.",
          "default": ""
        },
        "column_index_cache_size_in_kb": {
          "type": "integer",
          "description": "A threshold for the total size of all index entries for a partition that the database stores in the partition key cache.",
          "default": 2
        },
        "slow_query_log_timeout_in_ms": {
          "type": "integer",
          "description": "How long before a node logs slow queries. Select queries that exceed this value generate an aggregated log message to identify slow queries. To disable, set to 0.",
          "default": 500
        },
        "back_pressure_enabled": {
          "type": "boolean",
          "description": "Enable for the coordinator to apply the specified back pressure strategy to each mutation that is sent to replicas.",
          "default": false
        },
        "back_pressure_strategy_class": {
          "type": "string",
          "description": "The back-pressure strategy applied. The default implementation, RateBasedBackPressure, takes three arguments: high ratio, factor, and flow type, and uses the ratio between incoming mutation responses and outgoing mutation requests.",
          "default": "org.apache.cassandra.net.RateBasedBackPressure"
        },
        "back_pressure_high_ratio": {
          "type": "number",
          "description": "When outgoing mutations are below this value, they are rate limited according to the incoming rate decreased by the factor. When above this value, the rate limiting is increased by the factor.",
          "default": 0.9
        },
        "back_pressure_factor": {
          "type": "integer",
          "description": "A number between 1 and 10. Increases or decreases rate limiting.",
          "default": 5
        },
        "back_pressure_flow": {
          "type": "string",
          "description": "The flow speed to apply rate limiting: FAST - rate limited to the speed of the fastest replica. SLOW - rate limit to the speed of the slowest replica.",
          "default": "FAST"
        }
      },
      "additionalProperties": false,
      "required": [
        "cluster_name",
        "jmx_port",
        "num_tokens",
        "max_hint_window_in_ms",
        "hinted_handoff_enabled",
        "hinted_handoff_throttle_in_kb",
        "max_hints_delivery_threads",
        "batchlog_replay_throttle_in_kb",
        "partitioner",
        "key_cache_save_period",
        "row_cache_size_in_mb",
        "row_cache_save_period",
        "commitlog_sync_period_in_ms",
        "commitlog_segment_size_in_mb",
        "concurrent_reads",
        "concurrent_writes",
        "concurrent_counter_writes",
        "memtable_allocation_type",
        "index_summary_resize_interval_in_minutes",
        "storage_port",
        "start_native_transport",
        "native_transport_port",
        "start_rpc",
        "rpc_port",
        "rpc_keepalive",
        "thrift_framed_transport_size_in_mb",
        "tombstone_warn_threshold",
        "tombstone_failure_threshold",
        "column_index_size_in_kb",
        "batch_size_warn_threshold_in_kb",
        "batch_size_fail_threshold_in_kb",
        "compaction_throughput_mb_per_sec",
        "sstable_preemptive_open_interval_in_mb",
        "read_request_timeout_in_ms",
        "range_request_timeout_in_ms",
        "write_request_timeout_in_ms",
        "counter_write_request_timeout_in_ms",
        "cas_contention_timeout_in_ms",
        "truncate_request_timeout_in_ms",
        "request_timeout_in_ms",
        "dynamic_snitch_update_interval_in_ms",
        "dynamic_snitch_reset_interval_in_ms",
        "dynamic_snitch_badness_threshold",
        "internode_compression",
        "max_hints_file_size_in_mb",
        "hints_flush_period_in_ms",
        "concurrent_materialized_view_writes",
        "commitlog_total_space_in_mb",
        "auto_snapshot",
        "key_cache_keys_to_save",
        "row_cache_keys_to_save",
        "counter_cache_keys_to_save",
        "file_cache_size_in_mb",
        "memtable_heap_space_in_mb",
        "memtable_offheap_space_in_mb",
        "memtable_cleanup_threshold",
        "memtable_flush_writers",
        "listen_on_broadcast_address",
        "internode_authenticator",
        "native_transport_max_threads",
        "native_transport_max_frame_size_in_mb",
        "native_transport_max_concurrent_connections",
        "native_transport_max_concurrent_connections_per_ip",
        "rpc_min_threads",
        "rpc_max_threads",
        "rpc_send_buff_size_in_bytes",
        "rpc_recv_buff_size_in_bytes",
        "concurrent_compactors",
        "stream_throughput_outbound_megabits_per_sec",
        "inter_dc_stream_throughput_outbound_megabits_per_sec",
        "phi_convict_threshold",
        "buffer_pool_use_heap_if_exhausted",
        "disk_optimization_strategy",
        "max_value_size_in_mb",
        "otc_coalescing_strategy"
      ]
    }
  }
}
